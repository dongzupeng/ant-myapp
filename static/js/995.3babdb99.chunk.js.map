{"version":3,"file":"static/js/995.3babdb99.chunk.js","mappings":"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","sources":["webpack://antd-myapp/./src/pages/ChatAI/index.module.less?cf85","pages/ChatAI/index.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatAI\":\"index_chatAI__KrpI8\",\"content\":\"index_content__W6oEL\",\"answer\":\"index_answer__zPjIO\",\"question\":\"index_question__l7ggH\",\"footer\":\"index_footer__XxiiT\"};","import React, { useState, useEffect, useRef } from 'react';\nimport { Input } from 'antd';\nimport axios from 'axios';\nimport styles from './index.module.less';\n\nconst ChatAI = () => {\n  const [paragraphs, setParagraphs] = useState([]);\n  const [currentParagraphIndex, setCurrentParagraphIndex] = useState(0);\n  const [answerText, setAnswerText] = useState('');\n  const [questionText, setQuestion] = useState('');\n  const [currentCharIndex, setCurrentCharIndex] = useState(0);\n  const [history, setHistory] = useState([]); // 新增历史记录状态\n  const [isFirstSend, setIsFirstSend] = useState(true);\n  const [inputValue, setInputValue] = useState('');\n  const [isThinking, setIsThinking] = useState(false); // 新增正在思考中的状态\n\n  const chatContentRef = useRef(null);\n  const { Search } = Input;\n\n  useEffect(() => {\n    if (currentParagraphIndex < paragraphs.length) {\n      if (currentCharIndex < paragraphs[currentParagraphIndex].length) {\n        setTimeout(() => {\n          setAnswerText(\n            (prevDisplayText) =>\n              prevDisplayText +\n              paragraphs[currentParagraphIndex][currentCharIndex],\n          );\n          setCurrentCharIndex((prevIndex) => prevIndex + 1);\n        }, 10);\n      } else {\n        setCurrentParagraphIndex((prevIndex) => prevIndex + 1);\n        setCurrentCharIndex(0);\n      }\n    }\n    // 在打字机效果结束后或任何您想要滚动到底部的时机\n    const scrollContainer = chatContentRef.current;\n    if (scrollContainer) {\n      scrollContainer.scrollTop = scrollContainer.scrollHeight;\n    }\n  }, [currentParagraphIndex, currentCharIndex, paragraphs]);\n\n  const send = (value) => {\n    setParagraphs([]);\n    setAnswerText('');\n    setQuestion(value);\n    // 清空输入框的值\n    setInputValue('');\n    setIsThinking(true);\n    // 判断是否为第一次发送\n    if (isFirstSend) {\n      setIsFirstSend(false);\n    } else {\n      // 如果不是第一次发送，则更新历史记录\n      setHistory([\n        ...history,\n        {\n          question: questionText,\n          answer: JSON.parse(JSON.stringify(paragraphs)),\n        },\n      ]);\n    }\n    // 调用answer函数以获取新的回答并开始打字机效果\n    answer(value);\n    // 发送后滚动到底部\n    const scrollContainer = chatContentRef.current;\n    if (scrollContainer) {\n      scrollContainer.scrollTop = scrollContainer.scrollHeight;\n    }\n  };\n\n  const answer = (value) => {\n    const params = {\n      key: 'c4db6e183893b44858fb84eb44636af9',\n      question: value,\n      uniqueid: 'baby',\n      mode: 1,\n      priv: 1,\n      restype: 1,\n    };\n    axios\n      .request({\n        url: 'https://apis.tianapi.com/robot/index',\n        method: 'post',\n        data: params,\n        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n      })\n      .then((res) => {\n        console.log(res.data);\n        const fetchedParagraphs = res.data.result.reply;\n        setParagraphs(fetchedParagraphs);\n        if (fetchedParagraphs.length > 0) {\n          setIsThinking(false);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n        setIsThinking(false);\n      });\n    // 更新状态和索引以开始新的打字机效果\n    setCurrentParagraphIndex(0);\n    setCurrentCharIndex(0);\n  };\n\n  return (\n    <div className={styles.chatAI}>\n      <div className={styles.content} ref={chatContentRef}>\n        {/* 历史记录 */}\n        {history.map((item, index) => (\n          <div key={index} className={styles.historyItem}>\n            <div className={styles.question}>{item.question}</div>\n            <div className={styles.answer}>{item.answer}</div>\n          </div>\n        ))}\n        {questionText && <div className={styles.question}>{questionText}</div>}\n        {questionText && (\n          <div className={styles.answer}>\n            {isThinking ? '正在思考中...' : answerText}\n          </div>\n        )}\n      </div>\n\n      <div className={styles.footer}>\n        {/* 添加一个输入框 */}\n        <Search\n          placeholder='请输入您要搜索的内容'\n          enterButton='发送'\n          size='large'\n          style={{ width: '100%' }}\n          onSearch={send}\n          value={inputValue} // 设置输入框的值\n          onChange={(e) => setInputValue(e.target.value)} // 监听输入值的变化\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ChatAI;\n"],"names":["ChatAI","paragraphs","setParagraphs","useState","currentParagraphIndex","setCurrentParagraphIndex","answerText","setAnswerText","questionText","setQuestion","currentCharIndex","setCurrentCharIndex","history","setHistory","isFirstSend","setIsFirstSend","inputValue","setInputValue","isThinking","setIsThinking","chatContentRef","useRef","Search","Input","useEffect","length","setTimeout","prevDisplayText","prevIndex","scrollContainer","current","scrollTop","scrollHeight","answer","value","params","key","question","uniqueid","mode","priv","restype","axios","request","url","method","data","headers","then","res","fetchedParagraphs","result","reply","catch","err","_jsxs","className","styles","chatAI","children","content","ref","map","item","index","historyItem","_jsx","footer","placeholder","enterButton","size","style","width","onSearch","JSON","parse","stringify","onChange","e","target"],"sourceRoot":""}